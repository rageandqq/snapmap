import './FirebasePolyfill';
import RNFetchBlob from 'react-native-fetch-blob';

import * as firebase from 'firebase';
import haversine from 'haversine-distance';
// Initialize Firebase
const firebaseConfig = {
  apiKey: "AIzaSyD2oDk60klWIDBLki0JMeS84k7c5HHk1aU",
  authDomain: "photag-dev.firebaseapp.com",
  databaseURL: "https://photag-dev.firebaseio.com",
  storageBucket: "photag-dev.appspot.com",
  messagingSenderId: "615980575776"
};
const firebaseApp = firebase.initializeApp(firebaseConfig);
const firebaseDatabase = firebase.database(firebaseApp);
const firebaseStorage = firebase.storage(firebaseApp);

const uploadPhoto = (key, photo) => {
  console.log('Uploading photo with key', key);
  const rnfbURI = RNFetchBlob.wrap(photo);
  return Blob.build(rnfbURI, { type: 'image/png' })
  .then((blob) => {
    console.log('Using blob', blob)
    return firebaseStorage.ref().child(`photos/${key}`).put(blob, { contentType: 'image/png'})
    .then(snapshot => {
      console.log('Uploaded', snapshot);
    })
    .catch(err => {
      // TODO: Proper error handling
      console.log(err);
      return Promise.reject(err);
    });
  });
}

class DataManager {

  // Post a new photo to a certain location
  postNewPhoto = (photo, lat, lon, expiresIn = 24) => {
    console.log('Posting photo', photo, lat, lon);

    const expiryDate = new Date(new Date().getTime() + (expiresIn * 60 * 60 * 1000)).getTime();

    // Create a new entry in Firebase Database, with an autogenerated key
    const pushRef = firebaseDatabase.ref('photos').push();

    // Upload the photo to Firebase Storage
    return uploadPhoto(pushRef.key, photo)
    .then((result) => {
      // Set the appropriate metadata for the photo
      pushRef.set({
        location: [lat, lon],
        date: Date.now(),
        expiryDate,
        // date: firebase.database.ServerValue.TIMESTAMP,
        // userId: firebaseAuth.currentUser.uid,
      });
      return result;
    });
  };

  // Get photos that are near a certain location.
  // Can be called regularly at a set time interval.
  getNearbyPhotos = (lat, lon) => {
    return firebaseDatabase
    .ref('/photos')
    .orderByChild('expiryDate')
    .startAt(Date.now(), 'date')
    .once('value')
    .then(snapshot => {
      const result = [];
      snapshot.forEach((childSnapshot) => {
        const val = childSnapshot.val();
        val.key = childSnapshot.key;
        const distance = haversine({ lat, lng: lon }, { lat: val.location[0], lng: val.location[1] });
        if (distance <= 500) {
          result.push(val);
        }
      });

      const promises = result.map((photo) => {
        return firebaseStorage.ref(`photos/${photo.key}`).getDownloadURL()
        .then((url) => {
          photo.url = url;
        });
      });

      // console.log('Query', result);

      return Promise.all(promises)
      .then(() => {
        return result;
      });
    });
  };
}
const dataManager = new DataManager();
export default dataManager;
